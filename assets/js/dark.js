document.addEventListener("DOMContentLoaded", function () {
const dark_mode_btn = document.getElementById("dark_mode_btn");
const light_mode_btn = document.getElementById("light_mode_btn");
const themeIcon = document.getElementById("theme-icon");
const themeToggle = document.getElementById("theme-toggle");

// Define SVG icons with simplified auto icon
const icons = {
    light: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="5"/>
        <line x1="12" y1="1" x2="12" y2="3"/>
        <line x1="12" y1="21" x2="12" y2="23"/>
        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
        <line x1="1" y1="12" x2="3" y2="12"/>
        <line x1="21" y1="12" x2="23" y2="12"/>
        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
    </svg>`,
    dark: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <mask id="moon-mask">
            <rect x="0" y="0" width="24" height="24" fill="white"/>
            <circle cx="18" cy="10" r="8" fill="black"/>
        </mask>
        <circle cx="12" cy="12" r="9" mask="url(#moon-mask)"/>
    </svg>`,
    auto: `<?xml version="1.0" encoding="UTF-8"?>
    <!-- Generated by Pixelmator Pro 3.6 -->
    <svg width="20" height="20" viewBox="0 0 800 800" xmlns="http://www.w3.org/2000/svg">
        <path id="-Color" fill="currentColor" stroke="none" d="M 400 800 C 620.913879 800 800 620.91394 800 399.999969 C 800 179.08606 620.913879 0 400 0 C 179.086075 0 -2.3e-05 179.08606 -2.3e-05 399.999969 C -2.3e-05 620.91394 179.086075 800 400 800 Z M 400 740 L 400 60 C 587.776794 60 740 212.223206 740 399.999969 C 740 587.776794 587.776794 740 400 740 Z"/>
    </svg>
`
};

const themes = ["light", "dark", "auto"];
let currentTheme = localStorage.getItem("theme") || "auto";

    function applySystemTheme() {
        const isSystemDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        document.documentElement.setAttribute("data-theme", isSystemDark ? "dark" : "light");
        updateButtonVisibility(isSystemDark ? "dark" : "light");
        updateThemeIcon("auto");
        colorsMain();
    }

    function setScheme(theme) {
        if (theme === "auto") {
            localStorage.theme = "auto";
            applySystemTheme();
        } else {
            document.documentElement.setAttribute("data-theme", theme);
            localStorage.theme = theme;
            updateButtonVisibility(theme);
            updateThemeIcon(theme);
        }
        colorsMain();
    }

    function updateButtonVisibility(theme) {
        if (dark_mode_btn && light_mode_btn) {
            if (theme === "dark") {
                dark_mode_btn.classList.add('hidden');
                light_mode_btn.classList.remove('hidden');
            } else {
                light_mode_btn.classList.add('hidden');
                dark_mode_btn.classList.remove('hidden');
            }
        }
    }

    function updateThemeIcon(theme) {
        themeIcon.innerHTML = icons[theme];
    }

    function initTheme() {
        if (currentTheme === "auto") {
            applySystemTheme();
        } else {
            setScheme(currentTheme);
        }
    }

    themeToggle.addEventListener('click', () => {
        const nextTheme = themes[(themes.indexOf(currentTheme) + 1) % themes.length];
        currentTheme = nextTheme;
        setScheme(nextTheme);
    });

    const systemThemeQuery = window.matchMedia('(prefers-color-scheme: dark)');
    systemThemeQuery.addEventListener('change', event => {
        if (localStorage.theme === 'auto') {
            applySystemTheme();
        }
    });

    initTheme();
});